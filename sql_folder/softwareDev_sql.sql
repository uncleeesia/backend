-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS "softwaredev_schema".cleaner
(
    user_id bigint NOT NULL,
    view_count bigint,
    engagement_count bigint,
    CONSTRAINT cleaner_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS "softwaredev_schema".feedback
(
    feedback_id bigserial NOT NULL,
    by_user_id bigint,
    to_user_id bigint,
    service_id bigint,
    rating smallint,
    feedback_text jsonb,
    is_hidden boolean,
    is_removed boolean,
    feedback_timestamp timestamp(3) with time zone
);

CREATE TABLE IF NOT EXISTS "softwaredev_schema".general_user
(
    user_id bigserial NOT NULL,
    username character varying(20) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    phone_num character varying(15) COLLATE pg_catalog."default" NOT NULL,
    notification_method smallint NOT NULL DEFAULT 1,
    payment_method smallint NOT NULL DEFAULT 0,
    hidden_count integer NOT NULL DEFAULT 0,
    removed_count integer NOT NULL DEFAULT 0,
    favourite_list jsonb,
    unstruct_data jsonb,
    picture_url text,
    CONSTRAINT general_user_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS "softwaredev_schema".homeowner
(
    user_id bigint NOT NULL,
    service_id_list bigint[],
    CONSTRAINT homeowner_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS "softwaredev_schema".payment
(
    payment_id bigserial NOT NULL,
    payment_method smallint NOT NULL DEFAULT 0,
    service_id bigint,
    from_user_id bigint NOT NULL,
    to_user_id bigint NOT NULL,
    is_completed boolean,
    payment_timestamp timestamp(3) with time zone NOT NULL,
    CONSTRAINT payment_pkey PRIMARY KEY (payment_id)
);

CREATE TABLE IF NOT EXISTS "softwaredev_schema".service
(
    service_id bigserial NOT NULL,
    user_id bigint NOT NULL,
    from_date timestamp(3) with time zone,
    to_date timestamp(3) with time zone,
    view_count integer DEFAULT 0,
    engagement_count integer DEFAULT 0,
    category_tags jsonb,
    picture_url text,
    service_name text
    CONSTRAINT service_pkey PRIMARY KEY (service_id)
);

ALTER TABLE IF EXISTS "softwaredev_schema".cleaner
    ADD CONSTRAINT "cleaner user to user table" FOREIGN KEY (user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS cleaner_pkey
    ON "softwaredev_schema".cleaner(user_id);


ALTER TABLE IF EXISTS "softwaredev_schema".feedback
    ADD CONSTRAINT "feedback  from user to user table" FOREIGN KEY (from_user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".feedback
    ADD CONSTRAINT "feedback by user to user table" FOREIGN KEY (by_user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".feedback
    ADD CONSTRAINT feedback_service_id_fkey FOREIGN KEY (service_id)
    REFERENCES "softwaredev_schema".service (service_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".homeowner
    ADD CONSTRAINT "homeowner user to user table" FOREIGN KEY (user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS homeowner_pkey
    ON "softwaredev_schema".homeowner(user_id);


ALTER TABLE IF EXISTS "softwaredev_schema".payment
    ADD CONSTRAINT "payment from user to user table" FOREIGN KEY (from_user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".payment
    ADD CONSTRAINT "payment service to service table" FOREIGN KEY (service_id)
    REFERENCES "softwaredev_schema".service (service_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".payment
    ADD CONSTRAINT "payment to user to user table" FOREIGN KEY (to_user_id)
    REFERENCES "softwaredev_schema".general_user (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "softwaredev_schema".service
    ADD CONSTRAINT "service user to user table" FOREIGN KEY (user_id)
    REFERENCES "softwaredev_schema".cleaner (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;

END;